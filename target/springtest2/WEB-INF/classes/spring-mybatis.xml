<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:component-scan base-package="com.zzq"/>

    <context:property-placeholder location="classpath:db.properties" ignore-unresolvable="true"/>
    <context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"/>
    <context:property-placeholder location="classpath:email.properties" ignore-unresolvable="true"/>
    
    <bean id="mailMessage" class="org.springframework.mail.SimpleMailMessage">
        <property name="from" value="${mail.from}"/>
    </bean>
    
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="defaultEncoding" value="${mail.defaultEncoding}"/>
        <property name="host"  value="${mail.host}"/>
        <property name="username" value="${mail.username}"/>
        <property name="password" value="${mail.password}"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop> 
                <prop key="mail.debug">true</prop>
                <prop key="mail.smtp.timeout">0</prop>
                <prop key="mail.smtp.socketFactory.class">${mail.smtp.socketFactory.class}</prop>
                <prop key="mail.smtp.port">${mail.smtp.port}</prop>
                <prop key="mail.smtp.socketFactory.port">${mail.smtp.socketFactory.port}</prop>
            </props>
        </property>
    </bean>
    
    <!--文件的上传与下载-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="maxUploadSize" value="10485760000"/>
        <property name="maxInMemorySize" value="40960"/>
    </bean>

    <bean id="dataSourceAspect" class="com.zzq.aop.dataSourceAop.DataSourceAspect"></bean>
    <aop:config>
        <aop:aspect ref="dataSourceAspect">
            <aop:pointcut id="dataSourcePointCut" expression="execution(* com.zzq.service.*.*(..))"/>
            <aop:before method="intercept" pointcut-ref="dataSourcePointCut"/>
        </aop:aspect>
    </aop:config>
   

    <bean id="dataSourceOne" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="username" value="${user}"/>
        <property name="password" value="${password}"/>
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
    </bean>
    <bean id="dataSourceTwo" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="username" value="${user2}"/>
        <property name="password" value="${password2}"/>
        <property name="driverClassName" value="${driver2}"/>
        <property name="url" value="${url2}"/>
    </bean>
    
    <bean id="dataSource" class="com.zzq.utils.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry value-ref="dataSourceOne" key="dataSourceOne"/>
                <entry value-ref="dataSourceTwo" key="dataSourceTwo"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSourceOne"></property>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:com/zzq/mapper/*.xml"/>
        <!--开启redis缓存-->
        <property name="configurationProperties">
            <props>
                <prop key="cacheEnabled">true</prop>
                <prop key="lazyLoadingEnabled">false</prop>
                <prop key="aggressiveLazyLoading">true</prop>
            </props>
        </property>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.zzq.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--redis配置-->
    <!--redis数据源-->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${jedis.pool.maxIdle}"/>
        <property name="maxWaitMillis" value="${jedis.pool.maxWait}"/>
        <property name="testOnBorrow" value="${jedis.pool.testOnBorrow}"/>
    </bean>
    <!--spring-redis连接池管理工厂-->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.ip}"/>
        <property name="port" value="${redis.port}"/>
        <property name="password" value="${redis.password}"/>
        <property name="poolConfig" ref="poolConfig"/>
    </bean>
    <!-- 配置 key 和 value 的序列化器 -->
    <bean id="jdkSerializationRedisSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
    <!--<bean id="GenericJackson2JsonRedisSerializer" class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>-->
    <bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>

    <!-- 配置Redis模板对象 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"></property>
        <property name="keySerializer" ref="stringRedisSerializer"></property>
        <property name="valueSerializer" ref="jdkSerializationRedisSerializer"></property>
    </bean>

    
    
</beans>